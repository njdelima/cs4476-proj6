function imdb = proj6_ec_part1_setup_data()
%code for Computer Vision, Georgia Tech by James Hays

%This path is assumed to contain 'test' and 'train' which each contain 15
%subdirectories. The train folder has 100 samples of each category and the
%test has an arbitrary amount of each category. This is the exact data and
%train/test split used in Project 4.
SketchesPNGsPath = '../data/HumanObjectSketches/';

num_train_per_category = 60;
num_test_per_category  = 20;
total_images = 250*num_train_per_category + 250 * num_test_per_category;

image_size = [224 224]; %downsampling data for speed and because it hurts
% accuracy surprisingly little

imdb.images.data   = zeros(image_size(1), image_size(2), 1, total_images, 'single');
imdb.images.labels = zeros(1, total_images, 'single');
imdb.images.set    = zeros(1, total_images, 'uint8');
image_counter = 1;

categories = {'airplane', 'alarm clock', 'angel', 'ant', 'apple', ...
              'arm', 'armchair', 'ashtray', 'axe', 'backpack', ...
              'banana', 'barn', 'baseball bat', 'basket', 'bathtub', ...
              'bear (animal)', 'bed', 'bee', 'beer-mug', 'bell', ...
              'bench', 'bicycle', 'binoculars', 'blimp', 'book', ...
              'bookshelf', 'boomerang', 'bottle opener', 'bowl', ...
              'brain', 'bread', 'bridge', 'bulldozer', 'bus', 'bush', ...
              'butterfly', 'cabinet', 'cactus', 'cake', 'calculator', ...
              'camel', 'camera', 'candle', 'cannon', 'canoe', ...
              'car (sedan)', 'carrot', 'castle', 'cat', 'cell phone', ...
              'chair', 'chandelier', 'church', 'cigarette', 'cloud', ...
              'comb', 'computer monitor', 'computer-mouse', 'couch', ...
              'cow', 'crab', 'crane (machine)', 'crocodile', 'crown', ...
              'cup', 'diamond', 'dog', 'dolphin', 'donut', 'door', ...
              'door handle', 'dragon', 'duck', 'ear', 'elephant', ...
              'envelope', 'eye', 'eyeglasses', 'face', 'fan', ...
              'feather', 'fire hydrant', 'fish', 'flashlight', ...
              'floor lamp', 'flower with stem', 'flying bird', ...
              'flying saucer', 'foot', 'fork', 'frog', 'frying-pan', ...
              'giraffe', 'grapes', 'grenade', 'guitar', 'hamburger', ...
              'hammer', 'hand', 'harp', 'hat', 'head', 'head-phones', ...
              'hedgehog', 'helicopter', 'helmet', 'horse', ...
              'hot air balloon', 'hot-dog', 'hourglass', 'house', ...
              'human-skeleton', 'ice-cream-cone', 'ipod', 'kangaroo', ...
              'key', 'keyboard', 'knife', 'ladder', 'laptop', 'leaf', ...
              'lightbulb', 'lighter', 'lion', 'lobster', 'loudspeaker', ...
              'mailbox', 'megaphone', 'mermaid', 'microphone', ...
              'microscope', 'monkey', 'moon', 'mosquito', 'motorbike', ...
              'mouse (animal)', 'mouth', 'mug', 'mushroom', 'nose', ...
              'octopus', 'owl', 'palm tree', 'panda', 'paper clip', ...
              'parachute', 'parking meter', 'parrot', 'pear', 'pen', ...
              'penguin', 'person sitting', 'person walking', 'piano', ...
              'pickup truck', 'pig', 'pigeon', 'pineapple', ...
              'pipe (for smoking)', 'pizza', 'potted plant', ...
              'power outlet', 'present', 'pretzel', 'pumpkin', 'purse', ...
              'rabbit', 'race car', 'radio', 'rainbow', 'revolver', ...
              'rifle', 'rollerblades', 'rooster', 'sailboat', ...
              'santa claus', 'satellite', 'satellite dish', 'saxophone', ...
              'scissors', 'scorpion', 'screwdriver', 'sea turtle', ...
              'seagull', 'shark', 'sheep', 'ship', 'shoe', 'shovel', ...
              'skateboard', 'skull', 'skyscraper', 'snail', 'snake', ...
              'snowboard', 'snowman', 'socks', 'space shuttle', ...
              'speed-boat', 'spider', 'sponge bob', 'spoon', 'squirrel',...
              'standing bird', 'stapler', 'strawberry', 'streetlight', ...
              'submarine', 'suitcase', 'sun', 'suv', 'swan', 'sword', ...
              'syringe', 't-shirt', 'table', 'tablelamp', 'teacup', ...
              'teapot', 'teddy-bear', 'telephone', 'tennis-racket', ...
              'tent', 'tiger', 'tire', 'toilet', 'tomato', 'tooth', ...
              'toothbrush', 'tractor', 'traffic light', 'train', ...
              'tree', 'trombone', 'trousers', 'truck', 'trumpet', 'tv', ...
              'umbrella', 'van', 'vase', 'violin', 'walkie talkie', ...
              'wheel', 'wheelbarrow', 'windmill', 'wine-bottle', ...
              'wineglass', 'wrist-watch', 'zebra'};

sets = {'train', 'test'};

fprintf('Loading %d train and %d test images from each category\n', ...
          num_train_per_category, num_test_per_category)
fprintf('Each image will be resized to %d by %d\n', image_size(1),image_size(2));

%Read each image and resize it to image_size
for set = 1:length(sets)
    for category = 1:length(categories)
        cur_path = fullfile( SketchesPNGsPath, sets{set}, categories{category});
        cur_images = dir( fullfile( cur_path,  '*.png') );
        
        if(set == 1)
            fprintf('Taking %d out of %d images in %s\n', num_train_per_category, length(cur_images), cur_path);
            cur_images = cur_images(1:num_train_per_category);
        elseif(set == 2)
            fprintf('Taking %d out of %d images in %s\n', num_test_per_category, length(cur_images), cur_path);
            cur_images = cur_images(1:num_test_per_category);
        end

        for i = 1:length(cur_images)

            cur_image = imread(fullfile(cur_path, cur_images(i).name));
            cur_image = single(cur_image);
            if(size(cur_image,3) > 1)
                fprintf('color image found %s\n', fullfile(cur_path, cur_images(i).name));
                cur_image = rgb2gray(cur_image);
            end
            cur_image = imresize(cur_image, image_size);
                       
            % Stack images into a large image_size x 1 x total_images matrix
            % images.data
            imdb.images.data(:,:,1,image_counter) = cur_image;            
            imdb.images.labels(  1,image_counter) = category;
            imdb.images.set(     1,image_counter) = set; %1 for train, 2 for test (val)
            
            image_counter = image_counter + 1;
        end
    end
end

% Compute the mean image and subtract it from all images in the DB
% This is effectively zero-centering the pixel values
imageMean = mean(imdb.images.data(:)) ;
imdb.images.data = imdb.images.data - imageMean ;
